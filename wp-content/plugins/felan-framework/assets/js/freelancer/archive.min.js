(function (A) {
  "use strict";
  var E = felan_template_vars.ajax_url,
    I = felan_template_vars.item_amount,
    N = felan_template_vars.map_effects,
    w = felan_freelancer_archive_vars.not_freelancer;
  var i = false;
  var T = A(".felan-menu-filter");
  var j = A(".maptype").data("maptype");
  var P = false;
  var z = "";
  if (j == "google_map") {
    var e = A("#freelancer-map-filter");
  } else if (j == "openstreetmap") {
    var e = A("#maps");
  } else {
    var e = A("#map");
  }
  if (e.length) {
    z = "yes";
  }
  if (
    /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(
      navigator.userAgent
    )
  ) {
    P = true;
  }
  var O = function () {
    if (N !== "" && z) {
      A(".map-event .area-freelancers .felan-freelancers-item").each(
        function () {
          var e = A(this).find(".add-follow-freelancer").data("freelancer-id");
          if (j == "google_map") {
            A(this).on("mouseenter", function () {
              if (N == "popup") {
                A('div[title="marker' + e + '"]')
                  .trigger("click")
                  .css("z-index", "2");
              } else if (N == "shine") {
                A('div[title="marker' + e + '"]')
                  .trigger("click")
                  .addClass("mouseenter");
              }
            });
            A(this).on("mouseleave", function () {
              if (N == "popup") {
                A('div[title="marker' + e + '"]').css("z-index", "0");
                infowindow.open(null, null);
              } else if (N == "shine") {
                A('div[title="marker' + e + '"]')
                  .trigger("click")
                  .removeClass("mouseenter");
              }
            });
          } else if (j == "openstreetmap") {
            A(this).on("mouseenter", function () {
              if (N == "popup") {
                A(".marker-" + e)
                  .trigger("click")
                  .css("z-index", "2");
              } else if (N == "shine") {
                A(".marker-" + e)
                  .trigger("click")
                  .addClass("mouseenter");
              }
            });
            A(this).on("mouseleave", function () {
              if (N == "popup") {
                A(".marker-" + e).css("z-index", "0");
                A(".leaflet-popup-close-button").trigger("click");
              } else if (N == "shine") {
                A(".marker-" + e)
                  .trigger("click")
                  .removeClass("mouseenter");
              }
            });
          } else {
            A(this).on("mouseenter", function () {
              if (N == "popup") {
                A("#marker-" + e)
                  .trigger("click")
                  .css("z-index", "2");
              } else if (N == "shine") {
                A("#marker-" + e)
                  .trigger("click")
                  .addClass("mouseenter");
              }
            });
            A(this).on("mouseleave", function () {
              if (N == "popup") {
                A(".marker-" + e).css("z-index", "0");
                A(".mapboxgl-popup-close-button").trigger("click");
              } else if (N == "shine") {
                A("#marker-" + e)
                  .trigger("click")
                  .removeClass("mouseenter");
              }
            });
          }
        }
      );
    }
  };
  FREELANCER.elements = {
    init: function () {
      this.freelancer_layout();
      this.pagination();
      this.display_clear();
      this.filter_clear_top();
      this.filter_clear();
      A(".felan-menu-filter").on("input", "input.input-control", function () {
        A(".felan-pagination").find('input[name="paged"]').val(1);
        A(".form-freelancer-top-filter .btn-top-filter").removeData("clicked");
        i = true;
        FREELANCER.elements.ajax_load(i);
      });
      A(".archive-layout select.sort-by").on("change", function () {
        A(".felan-pagination").find('input[name="paged"]').val(1);
        A(".form-freelancer-top-filter .btn-top-filter").removeData("clicked");
        i = true;
        FREELANCER.elements.ajax_load(i);
      });
      A(".form-freelancer-top-filter .btn-top-filter").on(
        "click",
        function (e) {
          e.preventDefault();
          A(".felan-pagination").find('input[name="paged"]').val(1);
          A(this).data("clicked", true);
          i = true;
          FREELANCER.elements.ajax_load(i);
        }
      );
      if (e.length > 0) {
        FREELANCER.elements.ajax_load();
      }
      A('.btn-hide-map input[type="checkbox"]').on("change", function () {
        var e = A(".archive-layout .inner-content");
        var a = A(".layout-top-filter .nav-bar");
        if (A(this).attr("checked")) {
          A("input[value='hide_map']").prop("checked", false);
        } else {
          A("input[value='hide_map']").prop("checked", true);
        }
        if (e.hasClass("has-map")) {
          e.removeClass("has-map");
          e.addClass("no-map");
          a.removeClass("has-map");
          a.addClass("no-map");
        } else {
          e.removeClass("no-map");
          e.addClass("has-map");
          a.removeClass("no-map");
          a.addClass("has-map");
        }
        i = true;
        FREELANCER.elements.ajax_load(i);
      });
    },
    pagination: function () {
      A("body").on(
        "click",
        ".felan-pagination.ajax-call a.page-numbers",
        function (e) {
          e.preventDefault();
          A(".felan-pagination .pagination").addClass("active");
          A(".felan-pagination li .page-numbers").removeClass("current");
          A(this).addClass("current");
          var a = A(this).text();
          var t = 1;
          if (A(".felan-pagination").find('input[name="paged"]').val()) {
            t = A(".felan-pagination").find('input[name="paged"]').val();
          }
          if (A(this).hasClass("next")) {
            a = parseInt(t) + 1;
          }
          if (A(this).hasClass("prev")) {
            a = parseInt(t) - 1;
          }
          A(".felan-pagination").find('input[name="paged"]').val(a);
          i = true;
          if (A(this).attr("data-type") == "number") {
            FREELANCER.elements.scroll_to(".area-freelancers");
            FREELANCER.elements.ajax_load(i);
          } else {
            FREELANCER.elements.ajax_load(i, "loadmore");
          }
        }
      );
    },
    removeClassStartingWith: function (e, t) {
      e.removeClass(function (e, a) {
        return (a.match(new RegExp("\\b" + t + "\\S+", "g")) || []).join(" ");
      });
    },
    freelancer_layout: function () {
      A(".freelancer-layout a").on("click", function (e) {
        e.preventDefault();
        var a = A(this).attr("data-layout");
        var t = A(".felan-pagination").attr("data-type");
        if (t == "loadmore") {
          A(".felan-pagination").find('input[name="paged"]').val(1);
        }
        A(this).closest(".freelancer-layout").find("a").removeClass("active");
        A(this).addClass("active");
        FREELANCER.elements.removeClassStartingWith(
          A(".archive-layout>.inner-content"),
          "layout-"
        );
        A(this).closest(".inner-content").addClass(a);
        A(".form-freelancer-top-filter .btn-top-filter").removeData("clicked");
        A(".area-freelancers .felan-freelancers-item").each(function () {
          FREELANCER.elements.removeClassStartingWith(A(this), "layout-");
          A(this).addClass(a);
        });
        i = true;
        FREELANCER.elements.ajax_load(i);
      });
    },
    display_clear: function () {
      var e = A(".archive-freelancer");
      if (A(".felan-menu-filter ul.filter-control li.active").length > 0) {
        A(".felan-nav-filter").addClass("active");
        e.find(".felan-clear-filter").show();
      } else {
        A(".felan-nav-filter").removeClass("active");
        e.find(".felan-clear-filter").hide();
      }
      A('.felan-menu-filter input[type="checkbox"]:checked').each(function () {
        if (A(this).length > 0) {
          A(".felan-nav-filter").addClass("active");
          A(this).closest(".entry-filter").addClass("open");
          e.find(".felan-clear-filter").show();
        } else {
          A(".felan-nav-filter").removeClass("active");
          A(this).closest(".entry-filter").removeClass("open");
          e.find(".felan-clear-filter").hide();
        }
      });
    },
    filter_clear_top: function () {
      A(".felan-clear-top-filter").on("click", function () {
        A(
          '.form-freelancer-top-filter input[name="freelancer_filter_search"]'
        ).val("");
        A(".form-freelancer-top-filter .nice-select").val("");
        A(".form-freelancer-top-filter .nice-select").niceSelect("update");
        i = true;
        FREELANCER.elements.ajax_load(i);
      });
    },
    filter_clear: function () {
      A(".felan-clear-filter").on("click", function () {
        A(".felan-menu-filter ul.filter-control li").removeClass("active");
        A('.felan-menu-filter input[type="checkbox"]').prop("checked", false);
        i = true;
        FREELANCER.elements.ajax_load(i);
      });
    },
    ajax_load: function (a, t) {
      var e, i, n, r, o, l, c, s, d, p, m, f, v, u, g;
      var h = 1;
      h = A(".felan-pagination").find('input[name="paged"]').val();
      e = A('input[name="freelancer_filter_search"]').val();
      l = A('input[name="current_term"]').val();
      c = A('input[name="type_term"]').val();
      s = A(".freelancer-layout a.active").attr("data-layout");
      i = T.find(".sort-by.filter-control li.active a").data("sort");
      var _ = A('.archive-layout select[name="sort_by"]').val();
      if (_) {
        i = _;
      }
      u = A('input[name="search_fields_sidebar"]').val();
      var y = A.parseJSON(u);
      if (y.hasOwnProperty("freelancer_locations")) {
        r = A('input[name="freelancer_locations_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        r = A('select[name="freelancer_locations"]').val();
      }
      if (y.hasOwnProperty("freelancer_categories")) {
        n = A('input[name="freelancer_categories_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        n = A('select[name="freelancer_categories"]').val();
      }
      if (y.hasOwnProperty("freelancer_rating")) {
        o = A('input[name="freelancer_rating[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        o = A('select[name="freelancer_rating"]').val();
      }
      if (y.hasOwnProperty("freelancer_yoe")) {
        d = A('input[name="freelancer_yoe_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        d = A('select[name="freelancer_yoe"]').val();
      }
      if (y.hasOwnProperty("freelancer_qualification")) {
        p = A('input[name="freelancer_qualification_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        p = A('select[name="freelancer_qualification"]').val();
      }
      if (y.hasOwnProperty("freelancer_ages")) {
        m = A('input[name="freelancer_ages_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        m = A('select[name="freelancer_ages"]').val();
      }
      if (y.hasOwnProperty("freelancer_skills")) {
        f = A('input[name="freelancer_skills_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        f = A('select[name="freelancer_skills"]').val();
      }
      if (y.hasOwnProperty("freelancer_languages")) {
        v = A('input[name="freelancer_languages_id[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        v = A('select[name="freelancer_languages"]').val();
      }
      if (y.hasOwnProperty("freelancer_gender")) {
        g = A('input[name="freelancer_gender[]"]:checked')
          .map(function () {
            return A(this).val();
          })
          .get();
      } else {
        g = A('select[name="freelancer_gender"]').val();
      }
      var k = A(".maptype").clone();
      if (j == "google_map") {
      } else if (j == "openstreetmap") {
        var C = function (e, a) {
          A(".maptype").remove();
          A(k).insertAfter("#pac-input");
          var t = A("#maps").data("key");
          var i = A("#maps").data("level");
          var n = A("#maps").data("style");
          var r = [];
          var o = [];
          var l = [];
          A.each(e, function (e, a) {
            r.push({
              type: "Feature",
              geometry: { type: "Point", coordinates: [a.lat, a.lng] },
              properties: {
                iconSize: [40, 40],
                id: a.id,
                icon: a.marker_icon,
                freelancer: a.freelancer,
              },
            });
            o.push(a.lng);
            l.push(a.lat);
          });
          var c = { type: "FeatureCollection", features: r };
          var s = 0;
          for (var d = 0; d < o.length; d++) {
            s += parseInt(o[d], 10);
          }
          var p = 0;
          if (s / o.length) {
            p = s / o.length;
          }
          var m = 0;
          for (var d = 0; d < l.length; d++) {
            m += parseInt(l[d], 10);
          }
          var f = 0;
          if (m / l.length) {
            f = m / l.length;
          }
          var v = L.DomUtil.get("maps");
          if (v != null) {
            v._leaflet_id = null;
          }
          A(".leaflet-map-pane").remove();
          A(".leaflet-control-container").remove();
          var u = new L.map("maps");
          u.on("load", g);
          u.setView([f, p], i);
          function g() {
            var e = "mapbox/" + n;
            L.tileLayer(
              "https://api.mapbox.com/styles/v1/{id}/tiles/{z}/{x}/{y}?access_token=" +
                t,
              {
                attribution:
                  'Map data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a>',
                id: e,
                tileSize: 512,
                zoomOffset: -1,
                accessToken: t,
              }
            ).addTo(u);
            _();
          }
          function h(e) {
            u.flyTo(e.geometry.coordinates, i);
          }
          if (!("remove" in Element.prototype)) {
            Element.prototype.remove = function () {
              if (this.parentNode) {
                this.parentNode.removeChild(this);
              }
            };
          }
          function _() {
            c.features.forEach(function (t) {
              var e = document.createElement("div");
              e.id = "marker-" + t.properties.id;
              e.className = "marker";
              e.style.backgroundImage = "url(" + t.properties.icon + ")";
              e.style.width = t.properties.iconSize[0] + "px";
              e.style.height = t.properties.iconSize[1] + "px";
              e: {
              }
              var a = L.divIcon({
                className: "marker-" + t.properties.id,
                html: '<div><img src="' + t.properties.icon + '" alt=""></div>',
                iconSize: [48, 48],
              });
              var i = new L.marker(
                [t.geometry.coordinates[0], t.geometry.coordinates[1]],
                { icon: a }
              );
              i.addTo(u);
              if (N == "popup") {
                i.bindPopup(t.properties.freelancer);
              } else {
                i.bindPopup();
              }
              e.addEventListener("click", function (e) {
                h(t);
                var a = document.getElementsByClassName("active");
                e.stopPropagation();
                if (a[0]) {
                  a[0].classList.remove("active");
                }
              });
            });
          }
          if (!P) {
            O();
          }
        };
      } else {
        var b = function (e, i) {
          var a = A("#map").data("key");
          var t = A("#map").data("level");
          var n = A("#map").data("type");
          mapboxgl.accessToken = a;
          A(".mapboxgl-canary").remove();
          A(".mapboxgl-canvas-container").remove();
          A(".mapboxgl-control-container").remove();
          var r = [];
          var o = [];
          var l = [];
          A.each(e, function (e, a) {
            r.push({
              type: "Feature",
              geometry: { type: "Point", coordinates: [a.lng, a.lat] },
              properties: {
                iconSize: [48, 48],
                id: a.id,
                icon: a.marker_icon,
                freelancer: a.freelancer,
              },
            });
            o.push(a.lng);
            l.push(a.lat);
          });
          var c = 0;
          for (var s = 0; s < o.length; s++) {
            c += parseInt(o[s], 10);
          }
          var d = 0;
          if (c / o.length) {
            d = c / o.length;
          }
          var p = 0;
          for (var s = 0; s < l.length; s++) {
            p += parseInt(l[s], 10);
          }
          var m = 0;
          if (p / l.length) {
            m = p / l.length;
          }
          var i = new mapboxgl.Map({
            container: "map",
            style: "mapbox://styles/mapbox/" + n,
            zoom: t,
            center: [d, m],
          });
          i.addControl(new mapboxgl.NavigationControl());
          var f = { type: "FeatureCollection", features: r };
          i.on("load", function (e) {
            i.addLayer({
              id: "locations",
              type: "symbol",
              source: { type: "geojson", data: f },
              layout: { "icon-image": "", "icon-allow-overlap": true },
            });
            g();
          });
          function v(e) {
            i.flyTo({
              center: e.geometry.coordinates,
              bearing: 0,
              duration: 0,
              speed: 0.2,
              curve: 1,
              easing: function (e) {
                return e;
              },
            });
          }
          function u(e) {
            var a = document.getElementsByClassName("mapboxgl-popup");
            if (a[0]) a[0].remove();
            var t = new mapboxgl.Popup({ closeOnClick: false })
              .setLngLat(e.geometry.coordinates)
              .setHTML(e.properties.freelancer)
              .addTo(i);
          }
          if (!("remove" in Element.prototype)) {
            Element.prototype.remove = function () {
              if (this.parentNode) {
                this.parentNode.removeChild(this);
              }
            };
          }
          i.on("click", function (e) {
            var a = i.queryRenderedFeatures(e.point, { layers: ["locations"] });
            if (a.length) {
              var t = a[0];
              v(t);
              u(t);
            }
          });
          function g() {
            f.features.forEach(function (t) {
              var e = document.createElement("div");
              e.id = "marker-" + t.properties.id;
              e.className = "marker";
              e.style.backgroundImage = "url(" + t.properties.icon + ")";
              e.style.width = t.properties.iconSize[0] + "px";
              e.style.height = t.properties.iconSize[1] + "px";
              new mapboxgl.Marker(e, { offset: [0, -23] })
                .setLngLat(t.geometry.coordinates)
                .addTo(i);
              e.addEventListener("click", function (e) {
                v(t);
                if (N == "popup") {
                  u(t);
                }
                var a = document.getElementsByClassName("active");
                e.stopPropagation();
                if (a[0]) {
                  a[0].classList.remove("active");
                }
              });
            });
          }
        };
        if (!P) {
          O();
        }
      }
      FREELANCER.elements.display_clear();
      var x = A(".area-freelancers").attr("data-item-amount");
      if (x) {
        I = x;
      }
      var D = A(".felan-pagination").attr("data-type");
      A(".area-freelancers .felan-freelancers-item").addClass(
        "skeleton-loading"
      );
      A.ajax({
        dataType: "json",
        url: E,
        data: {
          action: "felan_freelancer_archive_ajax",
          paged: h,
          title: e,
          item_amount: I,
          sort_by: i,
          current_term: l,
          type_term: c,
          rating: o,
          location: r,
          categories: n,
          freelancer_layout: s,
          freelancer_yoe_id: d,
          freelancer_qualification_id: p,
          freelancer_ages_id: m,
          freelancer_skills_id: f,
          freelancer_languages_id: v,
          freelancer_gender: g,
        },
        beforeSend: function () {
          A(".felan-filter-search-map .felan-loading-effect").fadeIn();
          if (
            A(".form-freelancer-top-filter .btn-top-filter").data("clicked")
          ) {
            A(".btn-top-filter .btn-loading").fadeIn();
          }
        },
        success: function (e) {
          A(".btn-top-filter .btn-loading").fadeOut();
          A(".felan-filter-search-map .felan-loading-effect").fadeOut();
          A(".area-freelancers .felan-freelancers-item").removeClass(
            "skeleton-loading"
          );
          if (e.success === true) {
            if (a == true) {
              if (e.pagination_type == "number" || t !== "loadmore") {
                A(".area-freelancers").html(e.freelancer_html);
                A(".filter-neighborhood").html(e.filter_html);
                A(".felan-pagination .pagination").html(e.pagination);
                A(".archive-layout .result-count").html(e.count_post);
              } else {
                A(".area-freelancers").append(e.freelancer_html);
                A(".filter-neighborhood").html(e.filter_html);
                if (e.hidden_pagination) {
                  A(".felan-pagination .pagination").html("");
                }
                A(".felan-pagination .pagination").removeClass("active");
              }
            }
          } else {
            if (a == true) {
              if (e.pagination_type == "number" || t !== "loadmore") {
                A(".area-freelancers").html(
                  '<div class="felan-ajax-result">' + w + "</div>"
                );
                A(".archive-layout .result-count").html(e.count_post);
                A(".felan-pagination .pagination").html("");
              } else {
                A(".area-freelancers").append(e.freelancer_html);
                if (e.hidden_pagination) {
                  A(".felan-pagination .pagination").html("");
                }
                A(".felan-pagination .pagination").removeClass("active");
              }
            }
          }
          if (!P) {
            O();
          }
          if (z) {
            if (j == "google_map") {
            } else if (j == "openstreetmap") {
              C(e.freelancer, maps);
            } else {
              b(e.freelancer, map);
            }
          }
        },
      });
    },
  };
  FREELANCER.onReady = {
    init: function () {
      FREELANCER.elements.init();
    },
  };
  FREELANCER.onLoad = { init: function () {} };
  A(document).ready(function () {
    FREELANCER.elements.init();
  });
  A(window).load(FREELANCER.onLoad.init);
})(jQuery);
